# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  global(relativePath: String): Global!
  globalConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: GlobalFilter): GlobalConnection!
  pages(relativePath: String): Pages!
  pagesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PagesFilter): PagesConnection!
  events(relativePath: String): Events!
  eventsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: EventsFilter): EventsConnection!
  location(relativePath: String): Location!
  locationConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: LocationFilter): LocationConnection!
}

input DocumentFilter {
  global: GlobalFilter
  pages: PagesFilter
  events: EventsFilter
  location: LocationFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = Global | Pages | Events | Location

type GlobalHeaderNav {
  href: String
  label: String
}

type GlobalHeader {
  nav: [GlobalHeaderNav]
}

type Global implements Node & Document {
  header: GlobalHeader
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input GlobalHeaderNavFilter {
  href: StringFilter
  label: StringFilter
}

input GlobalHeaderFilter {
  nav: GlobalHeaderNavFilter
}

input GlobalFilter {
  header: GlobalHeaderFilter
}

type GlobalConnectionEdges {
  cursor: String!
  node: Global
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GlobalConnectionEdges]
}

type PagesSeo {
  title: String
  description: String
}

type PagesBlocksHeroImage {
  src: String
  alt: String
}

type PagesBlocksHero {
  image: PagesBlocksHeroImage
  headline: String
  tagline: String
  as_banner: Boolean
}

type PagesBlocksContent {
  name: String
  bgColor: String
  size_large: Boolean
  body: JSON
}

type PagesBlocksIntroductionImage {
  src: String
  alt: String
}

type PagesBlocksIntroduction {
  title: String
  text: String
  image: PagesBlocksIntroductionImage
}

type PagesBlocksFeatureLink {
  label: String
  url: String
}

type PagesBlocksFeature {
  subhead: String
  title: String
  link: PagesBlocksFeatureLink
}

type PagesBlocksTextAndImageImage {
  src: String
  alt: String
}

type PagesBlocksTextAndImageLink {
  label: String
  url: String
}

type PagesBlocksTextAndImage {
  showIllustrations: Boolean
  bgColor: String
  title: String
  body: JSON
  image: PagesBlocksTextAndImageImage
  image_position: String
  link: PagesBlocksTextAndImageLink
}

type PagesBlocksTestimonialsTestimonial {
  type: String
  author: String
  text: String
}

type PagesBlocksTestimonials {
  title: String
  testimonial: [PagesBlocksTestimonialsTestimonial]
}

union PagesBlocksEventsLocation = Location

type PagesBlocksEvents {
  title: String
  location: PagesBlocksEventsLocation
  stage: Boolean
  show_all_link: Boolean
  limit: Float
}

union PagesBlocks = PagesBlocksHero | PagesBlocksContent | PagesBlocksIntroduction | PagesBlocksFeature | PagesBlocksTextAndImage | PagesBlocksTestimonials | PagesBlocksEvents

type Pages implements Node & Document {
  seo: PagesSeo
  blocks: [PagesBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PagesSeoFilter {
  title: StringFilter
  description: StringFilter
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PagesBlocksHeroImageFilter {
  src: ImageFilter
  alt: StringFilter
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input PagesBlocksHeroFilter {
  image: PagesBlocksHeroImageFilter
  headline: StringFilter
  tagline: StringFilter
  as_banner: BooleanFilter
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PagesBlocksContentFilter {
  name: StringFilter
  bgColor: StringFilter
  size_large: BooleanFilter
  body: RichTextFilter
}

input PagesBlocksIntroductionImageFilter {
  src: ImageFilter
  alt: StringFilter
}

input PagesBlocksIntroductionFilter {
  title: StringFilter
  text: StringFilter
  image: PagesBlocksIntroductionImageFilter
}

input PagesBlocksFeatureLinkFilter {
  label: StringFilter
  url: StringFilter
}

input PagesBlocksFeatureFilter {
  subhead: StringFilter
  title: StringFilter
  link: PagesBlocksFeatureLinkFilter
}

input PagesBlocksTextAndImageImageFilter {
  src: ImageFilter
  alt: StringFilter
}

input PagesBlocksTextAndImageLinkFilter {
  label: StringFilter
  url: StringFilter
}

input PagesBlocksTextAndImageFilter {
  showIllustrations: BooleanFilter
  bgColor: StringFilter
  title: StringFilter
  body: RichTextFilter
  image: PagesBlocksTextAndImageImageFilter
  image_position: StringFilter
  link: PagesBlocksTextAndImageLinkFilter
}

input PagesBlocksTestimonialsTestimonialFilter {
  type: StringFilter
  author: StringFilter
  text: StringFilter
}

input PagesBlocksTestimonialsFilter {
  title: StringFilter
  testimonial: PagesBlocksTestimonialsTestimonialFilter
}

input PagesBlocksEventsLocationFilter {
  location: LocationFilter
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input PagesBlocksEventsFilter {
  title: StringFilter
  location: PagesBlocksEventsLocationFilter
  stage: BooleanFilter
  show_all_link: BooleanFilter
  limit: NumberFilter
}

input PagesBlocksFilter {
  hero: PagesBlocksHeroFilter
  content: PagesBlocksContentFilter
  introduction: PagesBlocksIntroductionFilter
  feature: PagesBlocksFeatureFilter
  textAndImage: PagesBlocksTextAndImageFilter
  testimonials: PagesBlocksTestimonialsFilter
  events: PagesBlocksEventsFilter
}

input PagesFilter {
  seo: PagesSeoFilter
  blocks: PagesBlocksFilter
}

type PagesConnectionEdges {
  cursor: String!
  node: Pages
}

type PagesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PagesConnectionEdges]
}

union EventsLocation = Location

type Events implements Node & Document {
  title: String
  start_date: String
  end_date: String
  location: EventsLocation
  type: String
  external_link: String
  description: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input EventsLocationFilter {
  location: LocationFilter
}

input EventsFilter {
  title: StringFilter
  start_date: DatetimeFilter
  end_date: DatetimeFilter
  location: EventsLocationFilter
  type: StringFilter
  external_link: StringFilter
  description: RichTextFilter
}

type EventsConnectionEdges {
  cursor: String!
  node: Events
}

type EventsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [EventsConnectionEdges]
}

type Location implements Node & Document {
  name: String
  description: JSON
  image: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input LocationFilter {
  name: StringFilter
  description: RichTextFilter
  image: ImageFilter
}

type LocationConnectionEdges {
  cursor: String!
  node: Location
}

type LocationConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [LocationConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateGlobal(relativePath: String!, params: GlobalMutation!): Global!
  createGlobal(relativePath: String!, params: GlobalMutation!): Global!
  updatePages(relativePath: String!, params: PagesMutation!): Pages!
  createPages(relativePath: String!, params: PagesMutation!): Pages!
  updateEvents(relativePath: String!, params: EventsMutation!): Events!
  createEvents(relativePath: String!, params: EventsMutation!): Events!
  updateLocation(relativePath: String!, params: LocationMutation!): Location!
  createLocation(relativePath: String!, params: LocationMutation!): Location!
}

input DocumentMutation {
  global: GlobalMutation
  pages: PagesMutation
  events: EventsMutation
  location: LocationMutation
}

input GlobalHeaderNavMutation {
  href: String
  label: String
}

input GlobalHeaderMutation {
  nav: [GlobalHeaderNavMutation]
}

input GlobalMutation {
  header: GlobalHeaderMutation
}

input PagesSeoMutation {
  title: String
  description: String
}

input PagesBlocksHeroImageMutation {
  src: String
  alt: String
}

input PagesBlocksHeroMutation {
  image: PagesBlocksHeroImageMutation
  headline: String
  tagline: String
  as_banner: Boolean
}

input PagesBlocksContentMutation {
  name: String
  bgColor: String
  size_large: Boolean
  body: JSON
}

input PagesBlocksIntroductionImageMutation {
  src: String
  alt: String
}

input PagesBlocksIntroductionMutation {
  title: String
  text: String
  image: PagesBlocksIntroductionImageMutation
}

input PagesBlocksFeatureLinkMutation {
  label: String
  url: String
}

input PagesBlocksFeatureMutation {
  subhead: String
  title: String
  link: PagesBlocksFeatureLinkMutation
}

input PagesBlocksTextAndImageImageMutation {
  src: String
  alt: String
}

input PagesBlocksTextAndImageLinkMutation {
  label: String
  url: String
}

input PagesBlocksTextAndImageMutation {
  showIllustrations: Boolean
  bgColor: String
  title: String
  body: JSON
  image: PagesBlocksTextAndImageImageMutation
  image_position: String
  link: PagesBlocksTextAndImageLinkMutation
}

input PagesBlocksTestimonialsTestimonialMutation {
  type: String
  author: String
  text: String
}

input PagesBlocksTestimonialsMutation {
  title: String
  testimonial: [PagesBlocksTestimonialsTestimonialMutation]
}

input PagesBlocksEventsMutation {
  title: String
  location: String
  stage: Boolean
  show_all_link: Boolean
  limit: Float
}

input PagesBlocksMutation {
  hero: PagesBlocksHeroMutation
  content: PagesBlocksContentMutation
  introduction: PagesBlocksIntroductionMutation
  feature: PagesBlocksFeatureMutation
  textAndImage: PagesBlocksTextAndImageMutation
  testimonials: PagesBlocksTestimonialsMutation
  events: PagesBlocksEventsMutation
}

input PagesMutation {
  seo: PagesSeoMutation
  blocks: [PagesBlocksMutation]
}

input EventsMutation {
  title: String
  start_date: String
  end_date: String
  location: String
  type: String
  external_link: String
  description: JSON
}

input LocationMutation {
  name: String
  description: JSON
  image: String
}

schema {
  query: Query
  mutation: Mutation
}
  